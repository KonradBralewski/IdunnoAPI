using IdunnoAPI.DAL;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;
using Moq;
using IdunnoAPI.DAL.Repositories.Interfaces;
using IdunnoAPI.DAL.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.InMemory;
using IdunnoAPI.Models.Posts;
using IdunnoAPI.Helpers;

namespace IdunnoAPI.UnitTests.Repositories
{
    public class PostRepositoryTests
    {
        private readonly IPostRepository _postRepository;
        private readonly IdunnoDbContext _dbContext;
        public PostRepositoryTests()
        {
            DbContextOptions<IdunnoDbContext> options = new DbContextOptionsBuilder<IdunnoDbContext>().
                 UseInMemoryDatabase(Guid.NewGuid().ToString()).Options;

            _dbContext = new IdunnoDbContext(options);
            _postRepository = new PostRepository(_dbContext);
        }

        [Fact]
        public async Task AddPostAsync_GivenValidRequest_NewPostIdReturned()
        {
            // Arrange

            Post testedPost = new Post { PostTitle = "Test", PostDescription = "Test", ImagePath = "Test" };

            // Act

            int postIdAsResult = await _postRepository.AddPostAsync(testedPost);

            // Assert

            Assert.NotNull(_postRepository.GetPostsAsQueryable().FirstOrDefault());
            Assert.True(_postRepository.GetPostsAsQueryable().FirstOrDefault().PostId > 0);
            Assert.Equal(_postRepository.GetPostsAsQueryable().FirstOrDefault(), testedPost);
            Assert.Equal(postIdAsResult, _postRepository.GetPostsAsQueryable().FirstOrDefault().PostId);
        }

        [Fact]
        public async Task AddPostAsync_GivenRequestHasNoTitle_ThrowsDbUpdateException()
        {
            // Arrange
            Post testedPost = new Post { PostDescription = "Test", ImagePath = "Test" };
            // Assert
            await Assert.ThrowsAsync<DbUpdateException>(async () => await _postRepository.AddPostAsync(testedPost));
        }

        [Fact]
        public async Task AddPostAsync_GivenRequestHasNoDescription_ThrowsDbUpdateException()
        {
            // Arrange
            Post testedPost = new Post { PostTitle = "Test", ImagePath = "Test" };

            // Assert
            await Assert.ThrowsAsync<DbUpdateException>(async () => await _postRepository.AddPostAsync(testedPost));
        }

        /// No need to test for PostId as it is auto-generated by the database

        [Fact]
        public async Task GetPostsByMatchAsync_GivenMatchWhichCouldBeFound_ReturnsIEnumerableOfPost()
        {
            // Arrange
            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };
            Post barPost = new Post { PostTitle = "Bar", PostDescription = "Foo" };
            Post thirdPost = new Post { PostTitle = "Third", PostDescription = "Third" };

            await _postRepository.AddPostAsync(fooPost);
            await _postRepository.AddPostAsync(barPost);
            await _postRepository.AddPostAsync(thirdPost);

            // Act

            IEnumerable<Post> postsAsResult = await _postRepository.GetPostsByMatchAsync("Foo");

            // Assert

            Assert.NotNull(postsAsResult);
            Assert.Equal(2, postsAsResult.Count());
            Assert.Contains(fooPost, postsAsResult);
            Assert.Contains(barPost, postsAsResult);
        }

        [Fact]
        public async Task GetPostsByMatchAsync_GivenMatchWhichDoesNotExists_ThrowsRequestException()
        {
            // Arrange
            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };

            await _postRepository.AddPostAsync(fooPost);

            // Assert
            await Assert.ThrowsAsync<RequestException>(async () => await _postRepository.GetPostsByMatchAsync("BarBarFooFoo"));
        }

        [Fact]
        public async Task GetPostsByMatchAsync_GivenEmptyMatch_ThrowsRequestException()
        {
            // Arrange
            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };

            await _postRepository.AddPostAsync(fooPost);

            // Assert

            await Assert.ThrowsAsync<RequestException>(async () => await _postRepository.GetPostsByMatchAsync(""));
        }

        [Fact]
        public async Task FindPostAsync_GivenValidPredicate_ReturnsPost()
        {
            // Arrange

            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };
            await _postRepository.AddPostAsync(fooPost);

            // Act

            Post postAsResult = await _postRepository.FindPostAsync(post => post.PostTitle == "Foo");

            // Assert

            Assert.NotNull(postAsResult);
            Assert.Equal("Foo", postAsResult.PostTitle);
            Assert.Equal("Bar", postAsResult.PostDescription);
            Assert.True(postAsResult.PostId > 0);
        }

        [Fact]

        public async Task FindPostAsync_GivenNullPredicate_ThrowsArgumentNullException()
        {
            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () => await _postRepository.FindPostAsync(null));
        }

        [Fact]
        public async Task FindPostAsync_GivenEmptyPredicate_ThrowsRequestException()
        {
            // Assert
            await Assert.ThrowsAsync<RequestException>(async () => await _postRepository.FindPostAsync(post => true));
        }

        [Fact]
        public async Task DeletePostAsync_GivenValidPostId_ReturnsTrueAndDeletesPost()
        {
            // Arrange

            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };
            await _postRepository.AddPostAsync(fooPost);
            _dbContext.ChangeTracker.Clear();

            // Act

            bool deletedSuccessfully = await _postRepository.DeletePostAsync(fooPost.PostId);

            // Assert

            Assert.True(deletedSuccessfully);
            Assert.Equal(0, _postRepository.GetPostsAsQueryable().Count());

        }

        [Fact]
        public async Task DeletePostAsync_GivenZeroPostId_ThrowsRequestExcepiton()
        {
            // Arrange

            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };
            await _postRepository.AddPostAsync(fooPost);
            _dbContext.ChangeTracker.Clear();

            // Assert

            await Assert.ThrowsAsync<RequestException>(async () => await _postRepository.DeletePostAsync(0));

        }

        [Fact]
        public async Task DeletePostAsync_GivenNonExistingPostId_ThrowsRequestException()
        {
            // Arrange

            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };
            await _postRepository.AddPostAsync(fooPost);
            _dbContext.ChangeTracker.Clear();

            // Assert

            await Assert.ThrowsAsync<RequestException>(async () => await _postRepository.DeletePostAsync(222));

        }

        [Fact]
        public async Task UpdatePostAsync_GivenValidPostId_ReturnsTrueAndDeletesPost()
        {
            // Arrange

            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };
            await _postRepository.AddPostAsync(fooPost);

            fooPost.PostTitle = "Bar";
            fooPost.PostDescription = "Foo";

            // Act

            bool updatedSuccessfully = await _postRepository.UpdatePostAsync(fooPost);

            // Assert

            Assert.True(updatedSuccessfully);
            Assert.Equal("Bar", _postRepository.GetPostsAsQueryable().FirstOrDefault().PostTitle);
            Assert.Equal("Foo", _postRepository.GetPostsAsQueryable().FirstOrDefault().PostDescription);
        }

        [Fact]
        public async Task UpdatePostAsync_GivenZeroPostId_ThrowsRequestException()
        {
            // Arrange

            Post fooPost = new Post {PostTitle = "Foo", PostDescription = "Bar" };
            await _postRepository.AddPostAsync(fooPost);

            fooPost.PostId = 0;

            // Assert

            await Assert.ThrowsAsync<RequestException>(async () => await _postRepository.UpdatePostAsync(fooPost));

        }

        [Fact]
        public async Task UpdatePostAsync_GivenNonExistingPostId_ThrowsRequestExcepiton()
        {
            // Arrange

            Post fooPost = new Post { PostTitle = "Foo", PostDescription = "Bar" };
            await _postRepository.AddPostAsync(fooPost);

            fooPost.PostId = 123321;

            // Assert

            await Assert.ThrowsAsync<RequestException>(async () => await _postRepository.UpdatePostAsync(fooPost));
        }
    }
}
